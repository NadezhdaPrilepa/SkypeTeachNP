 lesson#22
  1.Create interface NpBinaryTree(add, remove, contains, toStringWide, ToStringDeep)
  2.Implement interface NpBinaryTree
  3.Add tests (toStringWide, ToStringDeep)

 lesson#21
  1. Add remove for iterator NpList and add tests
  2. Add benchmark tests for remove
  3. Refactor watch methods
  4. Make interface NpSet(add, delete, contains)
  5. Implement NpHashSet and tests
  6. TODO: Add benchmark for NpSet
  7. TODO: Mark unexpected results in NpList performance excel report (used colors and comments)

 lesson#20
  1. Implement NpList as iterable (add tests)

 lesson#19
  1. Add iterator method for NpList
  2. Implement iterator method for NpArrayList
  3. Implement iterator method for NpLinkedList
  4. Add benchmark performance for iterator
  5. Describe reasons of using iterator

 lesson#18
  1. Implement NpLinkedList
  2. Pass tests for NpLinkedList
  3. Execute performance tests for NpLinkedList
  4. Make comparison table
  5. Add complexity to comparison table O(1) O(n)
  6. Execute performance tests for LinkedList and ArrayList using benchmark for NpList

 lesson#17
  1. Create benchmark for testing performance NpList
  2. Use class StopWatch

 lesson#16
  0. Make interface NpList(add, delete, getByIndex, getByElement, size)
  1. Implement from NpList - NpArrayList
  2. Describe arrays
  3. Make table for comparison collections based on arrays and links addresses

 lesson#15
  1. Create implement yandex result getter (get titles and urls of all
  results in yandex page by request string)
  2. Describe pattern rules
  3. Describe base interface of collections

 lesson#14
  1. Create class parametrized matrix of numbers and methods or some and multipled matrixes
 and A^2
  2. Create tests

 lesson#13
  1. create description of internal classes
  2. create external comparator class and use it in sorting collections

 lesson#12
  1. Add test mockito dependency to pom.xml
  2. Learn mockito API

 lesson#11
  1. zooTest change assertEquals to assertTrue(False)
  2. zooTest coverage 100%
  3. user registration create test classes for each classes and interfaces
  4. create maven module calculator

 lesson#10
  1. Restruct ZooTest(split ZooTest method into test case methods)
  2. Restruct user registration Test
  3. Move Interfaces to separate files(user registration)
  4. Create comments(contract) for all API classes and  methods

 lesson#9
  1. Learn git command stash
  2. Try to use git stash
  3. Describe rules of init blocks(fields,static fields, final fields)
  4. - Design use case with user registration + tests

 lesson#8
  1. Describe rules for JavaBean
  2. Describe rules for JAVA names conventions
  3. Describe constants in JAVA
 lesson#7
  1. - Create class Animal with overload methods
  2. - Create class Dog and Cat with overload and override methods
  3. - Create class Wolf(extends Dog) with overload and override methods
  4. - Create class Zoo with using classes 1-3(overload and override methods)
  5. Describe overload rules
  6. Describe override rules
 lesson#6
  1. + Create two branches with conflicts and merge both of them(resolving conflicts using Idea)
  2. + Describe access modifiers (accessible place, usage pattern)
  3. + Refactor NpAddress(move equalsAddress to separate package class with adding Unit test for it)
  4. + Describe requirements for Calculator
  5. + Analyse requirements for calculator and describe entities
  lesson#5
  1. Learn merge git command
  2. 38 line Find lib Guava utility method For Comparison Objects
  3. Override HashCode() for Address(create + pass test)
  4. Describe rules between equals() and hashCode()
 lesson#4
  1. Download Oracle Java Convention and read
  2. Create class Address and define method Equals for it(many params)
  3. Test Address.equals using JUnit(100% coverage)
  4. Read info about JUnit assert methods
 lesson#3
  1. Create cycle of objects (minimal count of objects)
  2. Cycle of objects should be possible for garbage collector
  3. Describe all public methods of Object

lesson#2
 1. Create dependencyManagement
 2. Right work with mvn in console
 3. Learn byte code commands

lesson#1
1. Create file with main git command
(pull, push,checkout, branch, add, rm, commit, status, log, fetch)
2. Add dependencies to maven (jUnit, google guava)






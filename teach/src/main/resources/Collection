- Существует 2 типа базовых интерфейсов коллекций: простые(Collection) и "ключ-значение"(Map)
- Простые коллекции, в свою очередь, делятся на 2 типа:
   1 Списки (содержат упорядоченный набор элементов - List, ArrayList, LinkedList)
   2 Множества (неупорядоченный набор элементов, где каждый элемент содержится один раз - Set)

Массивы:
ArrayList и Vector  - это коллекции, основанные на массиве.
 - Массив это объект. При создании массива в памяти выделяется место(непрерывный кусок памяти)
   под n элементов.
 - Каждый элемент массива имеет фиксированный размер (размер ссылки на обьекты 4байта)
 - Чтобы получить адрес i - го элемента массива необходимо воспользоваться формулой
   адрес первого элемента + i*4
 - Если элементы массива- объекты класса и они не проинициализированы, то массив
   содержит null(ссылка никуда не указывает).
 - Если элементы массива - примитивные типы(числа) и они не проинициализированы, то массив содержит 0.
 - Если элементы массива - примитивные типы(boolean) и они не проинициализированы, то массив содержит false.
 - Object[] массив наследуется от Object(доступны все его методы)
 - Массив наследуется от Object[](например, String[] наследуется от Object[], который наслудеутся от Object)
 - java.util.Arrays - класс для работы с массивами, у которого есть статические методы для
   работы с массивами, которые, например упрощают копирование одного массива в другой
 - Когда необходимо получение элементов индексу, то производительнее всего это делать в массиве.
 - Массив нельзя использовать для добавления и удаления элементов, т.к. массив имеет нединамическую длину,
   и при длине массива n нельзя добавить n+1 элемент(в этом случае необходимо создавать новый массив
   с фиксированной дилной n+1), аналогично с удалением(нельзя уменьшить длину массива)


                                                          ArrayList                LinkedList
   Список, реализованный на основе массива                   +                         -
   Список, основанный на объектах с ссылками между ними      -                         +
   Эффективен при поиске элемента по индексу                10 O(1)                    0 O(n)
   ДОБАВЛЕНИЕ --------------------------
   По индексу                                                7*O(n)                    7**O(n)
   По значению                                               5***O(n)                  7**O(n)
   В начало                                                  6****O(n)                 10***** O(1)
   В конец                                                   7******O(n)               10***** O(1)
   УДАЛЕНИЕ ----------------------------
   По индексу                                                5*O(n)                    7**O(n)
   По значению                                               5***O(n)                  7**O(n)
   С начала                                                  7******O(n)               10**** O(1)
   С конца                                                   10******* O(1)            10**** O(1)
* - Эффективный поиск по индексу + копирование в новый массив со сдвигом элементов
** - Не эффектиный поиск, но добавление(удаление) - 2 операции
*** - Не эффективный поиск(перебором) + копирование в новый массив со сдвигом элементов
**** - Копирование в новый массив со сдвигом ВСЕХ элементов
***** - Одна операция
****** - Копирование всех элементов без сдвига + новый элемент(при удалении - без первого элемента)
******* - изменение size

Итератор
Итератор — это интерфейс, содержащий методы, реализация которых позволяет с наименьшими
затратами (чем методы доступные напр. для List) пробежать по элементам коллекции.
hasNext() - возвращает boolean, в зависимости от наличия или отсутствия сдледующего элемента
в коллекции
next() - возвращает следующий элемент коллекции

